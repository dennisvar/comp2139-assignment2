// <auto-generated />
using System;
using Assignment1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment1.Migrations
{
    [DbContext(typeof(ClassContext))]
    partial class ClassContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment1.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Canada"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "China"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryName = "USA"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = 5,
                            CountryName = "Spain"
                        },
                        new
                        {
                            CountryId = 6,
                            CountryName = "Sweden"
                        });
                });

            modelBuilder.Entity("Assignment1.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "",
                            City = "San Francisco",
                            Country = "",
                            Email = "kanthoni@pge.com",
                            FirstName = "Kaitlyn",
                            LastName = "Anthoni",
                            Phone = "",
                            PostalCode = "",
                            State = ""
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "",
                            City = "Washington",
                            Country = "",
                            Email = "ania@mma.midc.com",
                            FirstName = "Ania ",
                            LastName = "Irvin",
                            Phone = "",
                            PostalCode = "",
                            State = ""
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "",
                            City = "Mission Viejo",
                            Country = "",
                            Email = "",
                            FirstName = "Gonzalo",
                            LastName = "Keeton",
                            Phone = "",
                            PostalCode = "",
                            State = ""
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "",
                            City = "Sacramento",
                            Country = "",
                            Email = "amauro@yahoo.com",
                            FirstName = "Anton",
                            LastName = "Mauro",
                            Phone = "",
                            PostalCode = "",
                            State = ""
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "",
                            City = "Fresno",
                            Country = "",
                            Email = "knayte@fresno.ca.gov",
                            FirstName = "Kendall",
                            LastName = "Mayte",
                            Phone = "",
                            PostalCode = "",
                            State = ""
                        },
                        new
                        {
                            CustomerId = 6,
                            Address = "",
                            City = "Los Angeles",
                            Country = "",
                            Email = "kenzie@mma.jobtrak.com",
                            FirstName = "Kenzie",
                            LastName = "Quinn",
                            Phone = "",
                            PostalCode = "",
                            State = ""
                        },
                        new
                        {
                            CustomerId = 7,
                            Address = "",
                            City = "Fresno",
                            Country = "",
                            Email = "marvin@expedata.com",
                            FirstName = "Marvin",
                            LastName = "Quintin",
                            Phone = "",
                            PostalCode = "",
                            State = ""
                        });
                });

            modelBuilder.Entity("Assignment1.Models.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IncidentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Incidents");

                    b.HasData(
                        new
                        {
                            IncidentId = 1,
                            CustomerId = 5,
                            DateClosed = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8342),
                            DateOpened = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8337),
                            Description = "",
                            ProductId = 4,
                            TechnicianId = 1,
                            Title = "Could not install"
                        },
                        new
                        {
                            IncidentId = 2,
                            CustomerId = 5,
                            DateClosed = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8350),
                            DateOpened = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8347),
                            Description = "",
                            ProductId = 4,
                            TechnicianId = 1,
                            Title = "Could not install"
                        });
                });

            modelBuilder.Entity("Assignment1.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Code = "TRNY10",
                            Name = "Tournament Master 1.0",
                            Price = 4.9900000000000002,
                            ReleaseDate = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(7921)
                        },
                        new
                        {
                            ProductId = 2,
                            Code = "LEAG10",
                            Name = "League Scheduler 1.0",
                            Price = 4.9900000000000002,
                            ReleaseDate = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(7970)
                        },
                        new
                        {
                            ProductId = 3,
                            Code = "LEAG10",
                            Name = "League Scheduler Deluxe 1.0",
                            Price = 7.9900000000000002,
                            ReleaseDate = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8027)
                        },
                        new
                        {
                            ProductId = 4,
                            Code = "DRAFT10",
                            Name = "Draft Manager 1.0",
                            Price = 4.9900000000000002,
                            ReleaseDate = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8032)
                        },
                        new
                        {
                            ProductId = 5,
                            Code = "TEAM10",
                            Name = "Team Manager 1.0",
                            Price = 4.9900000000000002,
                            ReleaseDate = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8035)
                        },
                        new
                        {
                            ProductId = 6,
                            Code = "TRNY20",
                            Name = "Tournament Master 2.0",
                            Price = 5.9900000000000002,
                            ReleaseDate = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8039)
                        },
                        new
                        {
                            ProductId = 7,
                            Code = "DRAFT20",
                            Name = "Draft Manager 2.0",
                            Price = 5.9900000000000002,
                            ReleaseDate = new DateTime(2022, 2, 27, 21, 28, 15, 506, DateTimeKind.Local).AddTicks(8043)
                        });
                });

            modelBuilder.Entity("Assignment1.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Assignment1.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicianId");

                    b.ToTable("Technicians");

                    b.HasData(
                        new
                        {
                            TechnicianId = 1,
                            Email = "alison@sportsprosoftware.com",
                            Name = "Alison Diaz",
                            Phone = "800-555-0443"
                        },
                        new
                        {
                            TechnicianId = 2,
                            Email = "awilson@sportsprosoftware.com",
                            Name = "Andrew Wilson",
                            Phone = "800-555-0449"
                        },
                        new
                        {
                            TechnicianId = 3,
                            Email = "gfiori@sportsprosoftware.com",
                            Name = "Gina Fiori",
                            Phone = "800-555-0459"
                        },
                        new
                        {
                            TechnicianId = 4,
                            Email = "gunter@sportsprosoftware.com",
                            Name = "Gunter Wendt",
                            Phone = "800-555-0400"
                        },
                        new
                        {
                            TechnicianId = 5,
                            Email = "jason@sportsprosoftware.com",
                            Name = "Jason Lee",
                            Phone = "800-555-0445"
                        });
                });

            modelBuilder.Entity("Assignment1.Models.Incident", b =>
                {
                    b.HasOne("Assignment1.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment1.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment1.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Technician");
                });
#pragma warning restore 612, 618
        }
    }
}
